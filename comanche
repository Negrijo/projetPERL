#!/usr/bin/perl

######################LESARGUMENTS######################

use Socket;

my %icecream;
my $client = 0;

my $meth = "HTTP/1.1 200 OK \r\n"."Content-type: Text/HTML\r\n"."\r\n";
my $debutHTML = "<!DOCTYPE HTML>\n"."<html>\n"."<head>\n"."</head>\n"."<body>\n"."<h1>Comanche</h1>\n";
my $finHTML = "</body>\n"."</html>\n";

######################LEPROGRAMME######################

if(@ARGV){
	if ($ARGV[0] eq "start"){
			#lecture des arguments dans comanche conf
			open(CONF, "comanche.conf") || die("Ouverture de comanche.conf impossible !\n");
			while(<CONF>){
				unless(/^\s*[;\$#]|^$/){
					chop;
					@banana = split(/\s+/);
					#MODIF#
					if ($banana[0] eq 'exec'){
						#regex
						$icecream{$banana[0]}=$banana[1];
						$icecream{"cheminexec"}=$banana[2];
					}
					elsif ($banana[0] eq 'route'){
						#regex
						$icecream{$banana[0]}=$banana[1];
						$icecream{"cheminroute"}=$banana[3];

					}
					#FINMODIF#
					$icecream{$banana[1]} = $banana[$#banana];
				}	
			}
			$port = $icecream{"port"};
			$error = $icecream{"error"};
			$index = $icecream{"index"};
			$clients = $icecream{"clients"};
			$logfile = $icecream{"logfile"};
			$route = $icecream{"route"};
			$cheminroute = $icecream{"cheminroute"};
			$exec = $icecream{"exec"};
			$cheminexec = $icecream{"cheminexec"};

			############################################################################################
			$pid = fork();
			if($pid == 0){
				
				#Création de la socket
				socket(SERVEUR, PF_INET, SOCK_STREAM, getprotobyname('tcp'));
				setsockopt(SERVEUR, SOL_SOCKET, SO_REUSEADDR, 1);
				$mon_adresse = sockaddr_in ($port, INADDR_ANY);

				bind(SERVEUR,$mon_adresse) or die ("Erreur bind");
				listen(SERVEUR,$clients) or die ("Erreur listen");

				print "2-Demarrage du serveur\n";

				accept(CLIENT, SERVEUR) or die ("Accept impossible");

				$worker = fork();

				print "$worker\n";

				if($worker == 0){
					print "flag2\n";
					print "Je suis dans le worker\n";
					
					$test = <CLIENT>;

					print "$test\n";

					@decoupe = split(/\s+/, $test);

					if ($decoupe[0] eq 'GET' && $decoupe[2] eq 'HTTP/1.1\r\n'){print "OK\n";}
					
					#Je regarde si la requete est valide.
					$test =~ /(?-i)GET(?i)\s(\/(?:.*))\sHTTP\/1\.1/ || print "hello";
					#Fin de la verification

					$peer = getpeername CLIENT;
					($pcli, $iaddr) = sockaddr_in($peer);
					$ip = inet_ntoa($iaddr);
						
					}

				}	
				else{
					print"1-Sauvegarde du pid\n";
					open(PROC, ">procfils") || die("Impossible d'ouvrir le fichier -> procfils <-");
					print PROC $pid;
					close(PROC);
				}

			############################################################################################

		}

		elsif ($ARGV[0] eq "stop"){
			print "Arrêt du serveur\n";
			close(SERVEUR) or die ("Fermeture du serveur impossible\n");
			print "flag stop\n";
			exit 1;
			print "invisible\n";
		}
		
		elsif($ARGV[0] eq "status"){
			print "Voici les informations :\n";

		}
		else{
			die("Erreur d'argument => start ou stop ou status\n")
		}
	}
	else{
		die("Usage => comanche arg\n")
	}

######################FONCTIONS######################

# PAS DE PARAM
sub eRROR400{
	my $message = "HTTP/1.1 400 Bad Request \r\n"."Content-type: Text/HTML\r\n"."\r\n";
	my $debutERROR = "<!DOCTYPE HTML>\n"."<html>\n"."<head>\n"."<title>400 Bad Request</title>\n"."</head>\n"."<body>\n"."<h1> 400 Bad Request</h1>\n";
	my $indication = "La syntaxe de la requete est erronee";
	my $finERROR = "</body>\n"."</html>\n";

	print CLIENT $message.$debutERROR.$indication.$finERROR;
}

# PAS DE PARAM
sub eRROR403{
	my $message = "HTTP/1.1 403 Forbidden \r\n"."Content-type: Text/HTML\r\n"."\r\n";
	my $debutERROR = "<!DOCTYPE HTML>\n"."<html>\n"."<head>\n"."<title>403 Forbidden</title>\n"."</head>\n"."<body>\n"."<h1>403 Forbidden</h1>\n";
	my $indication = "Le serveur a compris la requete, mais refuse de l'executer.";
	my $finERROR = "</body>\n"."</html>\n";

	print CLIENT $message.$debutERROR.$indication.$finERROR;
}

# PAS DE PARAM
sub eRROR404{
	my $message = "HTTP/1.1 404 Not Found \r\n"."Content-type: Text/HTML\r\n"."\r\n";
	my $debutERROR = "<!DOCTYPE HTML>\n"."<html>\n"."<head>\n"."<title>404 Not Found</title>\n"."</head>\n"."<body>\n"."<h1> 404 Not Found</h1>\n";
	my $indication = "Ressource non trouvee";
	my $finERROR = "</body>\n"."</html>\n";

	print CLIENT $message.$debutERROR.$indication.$finERROR;
}

# PAS DE PARAM
sub eRROR405{
	my $message = "HTTP/1.1 405 Method Not Allowed \r\n"."Content-type: Text/HTML\r\n"."\r\n";
	my $debutERROR = "<!DOCTYPE HTML>\n"."<html>\n"."<head>\n"."<title>405 Method Not Allowed</title>\n"."</head>\n"."<body>\n"."<h1>405 Method Not Allowed</h1>\n";
	my $indication = "Methode de requete non autorisee";
	my $finERROR = "</body>\n"."</html>\n";

	print CLIENT $message.$debutERROR.$indication.$finERROR;
}

# PAS DE PARAM
sub eRROR415{
	my $message = "HTTP/1.1 415 Unsupported Media Type \r\n"."Content-type: Text/HTML\r\n"."\r\n";
	my $debutERROR = "<!DOCTYPE HTML>\n"."<html>\n"."<head>\n"."<title>415 Unsupported Media Type</title>\n"."</head>\n"."<body>\n"."<h1>415 Unsupported Media Type</h1>\n";
	my $indication = "Format de requete non supporte pour une methode et une ressource donnees";
	my $finERROR = "</body>\n"."</html>\n";

	print CLIENT $message.$debutERROR.$indication.$finERROR;
}

# PAS DE PARAM
sub eRROR503{
	my $message = "HTTP/1.1 503 Service Unavailable \r\n"."Content-type: Text/HTML\r\n"."\r\n";
	my $debutERROR = "<!DOCTYPE HTML>\n"."<html>\n"."<head>\n"."<title>503 Service Unavailable</title>\n"."</head>\n"."<body>\n"."<h1>503 Service Unavailable</h1>\n";
	my $indication = "Service temporairement indisponible ou en maintenance";
	my $finERROR = "</body>\n"."</html>\n";

	print CLIENT $message.$debutERROR.$indication.$finERROR;
}

# PAS DE PARAM
sub eRROR505{
	my $message = "HTTP/1.1 505 HTTP Version not supported \r\n"."Content-type: Text/HTML\r\n"."\r\n";
	my $debutERROR = "<!DOCTYPE HTML>\n"."<html>\n"."<head>\n"."<title>505 HTTP Version not supported</title>\n"."</head>\n"."<body>\n"."<h1>505 HTTP Version not supported</h1>\n";
	my $indication = "505 HTTP Version not supported";
	my $finERROR = "</body>\n"."</html>\n";

	print CLIENT $message.$debutERROR.$indication.$finERROR;
}



